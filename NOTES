                                                           -*- org -*-
* Tasks [4/4]
** DONE full set of runs
*** First lets compile the best individual to an executable
#+begin_src lisp
  (defun final-pop-to-best (sub-dir)
    (let ((dir (list :relative "results" "cycles" sub-dir)))
      (phenome (extremum (restore (make-pathname
                                   :directory dir
                                   :name "final-pop"
                                   :type "store")) #'< :key #'fitness)
               :bin (make-pathname :directory dir
                                   :name "best"
                                   :type "exe"))
      (format t "~a finished~%" sub-dir)))
#+end_src

#+begin_src sh
  make results/cycles/0pBUwG9t-c/best.check
#+end_src

*** how many pass the local =big-checker=
19/20 compiled best.exe executables pass the big-checker.  The only
one that doesn't is =results/cycles/NsP9aDsX-c/=.

Since we don't control for size, there's an interesting range to the
size of output
#+begin_src sh
  find results/cycles -name "best.out" -exec wc -l {} \;
#+end_src

#+RESULTS:
| 10001 | NYYRqD4Z-c |
| 10001 | NpqiAD0o-c |
| 10001 | ugIS6t0C-c |
| 10001 | LjZCxShb-c |
| 10001 | BdXQwPMs-c |
| 10001 | oB6f2bLY-c |
| 10001 | 9Bo2NWKk-c |
| 10001 | GCNLwgQa-c |
| 10001 | NsP9aDsX-c |
| 10002 | NxTh1U3i-c |
| 10002 | VSn8pQBm-c |
| 10002 | bs7WDSmN-c |
| 13334 | sRerwQzf-c |
| 19998 | U0moHgAE-c |
| 20000 | roVlsHyd-c |
| 20001 | qScFC9cw-c |
| 20002 | gvb1r3Ve-c |
| 39997 | PF9jlpVE-c |
| 40000 | 0pBUwG9t-c |
| 40000 | bI6bVmrt-c |

*** average improvement of an order of magnitude
average improvement of 89%
#+begin_src bash
  for stat in $(find results/cycles -name "best.exe"|sed 's/best.exe/stats.txt/');do
      first=$(head -1 $stat|cut -d' ' -f2)
      last=$(tail -1 $stat|cut -d' ' -f2)
      echo "$(basename $(dirname $stat)) $first $last"
  done
#+end_src

#+RESULTS:
| BdXQwPMs-c |    6.79889e9 | 3.7208003e9 | 0.45273415 |
| bs7WDSmN-c |   5.300945e9 | 2.1829135e9 | 0.58820295 |
| NpqiAD0o-c |  3.0209718e9 | 1.1196506e9 | 0.62937403 |
| oB6f2bLY-c | 1.4669997e10 | 3.7549914e9 | 0.74403598 |
| 9Bo2NWKk-c | 1.0637791e10 | 1.7469697e9 | 0.83577702 |
| ugIS6t0C-c |  2.5790858e9 | 4.1272483e8 | 0.83997243 |
| LjZCxShb-c |   4.488394e9 | 3.1797504e8 | 0.92915617 |
| GCNLwgQa-c | 1.2158425e10 | 8.6105696e8 | 0.92918022 |
| U0moHgAE-c |   5.057164e9 | 3.0458388e7 | 0.99397718 |
| gvb1r3Ve-c |  5.1358566e9 | 1.5230012e7 | 0.99703457 |
| NYYRqD4Z-c |   7.700368e9 | 1.3782496e7 | 0.99821015 |
| bI6bVmrt-c |   5.486419e9 |   9345598.0 | 0.99829659 |
| PF9jlpVE-c |  4.0010314e9 |   4920333.0 | 0.99877023 |
| 0pBUwG9t-c |  2.9709745e9 |   3633374.0 | 0.99877704 |
| roVlsHyd-c | 1.3075768e10 |  1.453675e7 | 0.99888827 |
| VSn8pQBm-c |   9.074641e9 |   9212108.0 | 0.99898485 |
| qScFC9cw-c |   4.857447e9 |   3271676.0 | 0.99932646 |
| sRerwQzf-c |  2.177787e10 |   9337748.0 | 0.99957123 |
| NxTh1U3i-c | 1.4300527e10 |   4361130.0 | 0.99969504 |
| NsP9aDsX-c |  6.0338104e9 |   1249184.0 | 0.99979297 |
|------------+--------------+-------------+------------|
|            |              |             | 0.89648788 |
#+TBLFM: $4=($2-$3)/$2::@21$4=vmean(@1..@-1)

*** held out tests
Seem to be dangerous, running the following slows down my machine, and
kills other processes (e.g., windows drop out of my GUI).
: evaluate results/cycles/BdXQwPMs-c/best.exe

** DONE re-run cycle evolution w/error checks
ensure that the optimize script fails if non-zero test script exit

** DONE evaluate script should output real error and exit
This doesn't seem to be the case, as some segfaulting cache-references
individuals are segfaulting and returning 0 exits.

** DONE anonymize the data
*** in =ps1=

1. unpack all submissions
   #+begin_src sh
     for i in *.zip;do
         NAME=${i%.zip}
         mkdir $NAME
         cd $NAME
         unzip ../$NAME.zip
         cd ..
     done
   #+end_src

2. randomize file names
   #+begin_src sh
     for dir in $(ls -1 --color=never ./|grep -v test-|grep -v grades);do
         RND=$(echo $(< /dev/urandom tr -dc A-Za-z0-9 | head -c8))
         mv $dir $RND
         cat 4610-ps1-grades-s12/$dir.html|sed 's/$dir/$RND/g'>$RND.html
         rm 4610-ps1-grades-s12/$dir.html
         echo $dir $RND >> /tmp/foo.txt
     done
   #+end_src

3. randomize names in files
   #+begin_src sh
     cd 4610-ps1-grades-s12
     for rand in *.html;do
         new=${rand%.html}
         old=$(grep ${rand%.html} /tmp/foo.txt|cut -d' ' -f1)
         sed -i 's/$old/$new/g' $rand
     done
   #+end_src

*** in =ps0=

#+begin_src sh
  for dir in $(ls -1 --color=never ./);do
      mv $dir $(grep $dir /tmp/foo.txt|grep -v zip|awk '{print $2}')
  done
#+end_src
*** strip all comments from source files
We can use Emacs for this.

#+begin_src sh
  emacs --batch --eval <(cat <<EOF
  (progn
  (load-file "~/.emacs.d/elpa/caml-3.12.0.1/caml.el")
  (add-to-list (quote auto-mode-alist) (cons "\\.[mc]l" (quote caml-mode)))
  (mapc (lambda (file)
          (find-file file)
          (comment-kill (count-lines (point-min) (point-max)))
          (save-buffer)
          (kill-buffer))
     (list $(ls assignment/**/*.{c,rb,py,ml,cl}|sed 's/^/"/;s/$/"/;'))))
  EOF
  )
#+end_src

** Optimize
: optimize "evaluate ~a -s 0 -p -ecycles" assignment/ps1/${dir}/rosetta-c.s -F cycles -t 6 -r results/${dir} -w sh-runner/work/

* Notes
** Compile every language to assembler
*** C
: gcc -S $^ -o $@

*** OCaml
good discussion of Ocaml types with lots of example assembly
http://www.ocaml-tutorial.org/performance_and_profiling

1) first generate the required .s and startup files
   : ocamlopt -dstartup -S bubble.ml
2) then find out what flags ocamlopt is passing to gcc
   : ocamlopt -verbose -o bub1 bubble.ml
3) call gcc on the startup and .s file, as well as the ocaml libraries
   copied from the verbose output of ocamlopt -verbose, e.g.
   : gcc -o bub '-L/usr/lib/ocaml' 'a.out.startup.s' '/usr/lib/ocaml/std_exit.o' 'bubble.s' '/usr/lib/ocaml/stdlib.a' '/usr/lib/ocaml/libasmrun.a' -lm  -ldl

#+begin_src sh :shebang=#!/bin/bash :tangle fake-gcc
  gcc -o $2 '-L/usr/lib/ocaml' '/home/eschulte/research/epr/asm/sorters/sort-rb/src/insertion-ml.startup.s' '/usr/lib/ocaml/std_exit.o' $3 '/usr/lib/ocaml/stdlib.a' '/usr/lib/ocaml/libasmrun.a' -lm  -ldl
#+end_src

*** Cool
: cool --x86 sub/ps1/0DK52bvl/rosetta.cl

will write output to rosetta.s

*** Ruby
Maybe with https://github.com/seattlerb/ruby_to_c.

*** Python
Maybe with http://cython.org/.

** Wes' Links
#+begin_quote
ON YOUR HONOR, you will not attempt to link student names to these
submissions, and will ignore any such information you find.

http://www.cs.virginia.edu/~weimer/4610/pa1/pa1.html

http://www.cs.virginia.edu/~weimer/4610/pa1/pa1-testcases.zip

PS0 and PS1 are the same -- they just had to submit them staggered.

There is a Cool (.cl) compiler to X86_64 assembly located here:

http://www.cs.virginia.edu/~weimer/4610/cool.html

        - Wes
#+end_quote
